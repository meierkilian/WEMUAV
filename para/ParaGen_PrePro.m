function para = ParaGen_PrePro()
% Generating parameters relevant for preprocessing

    % datetime of start time, if "" (empty string) then start is set at the first data point.
    % para.startTime = datetime(2021,03,22,14,05,00); 
    para.startTime = datetime(2020,07,18,16,00,00); 
    % para.startTime = ""; 

    % datetime of end time, if "" (empty string) then end is set at the last data point.
    % para.endTime = datetime(2021,03,22,14,10,00); 
    para.endTime = datetime(2020,07,18,16,10,00); 
    % para.endTime = ""; 

    % time resolution at which the data is resampled, i.e. duration in [s]
    % between two samples.
    para.timeRes = 0.05; % 20 Hz

    % path to reference data can be a vector of paths, must match size of
    % flightInputpath
    para.refInput.path = {...
        char(fullfile("C:","Users","Kilian","Documents","EPFL","PDM","SW","EstArthurGarreau","1_DATA","Anemo","2020.07.18 23.59 Adventdalen_Sec.dat")) ...
    %     ,''
        };

    % type of reference (describes the file formatting), available types are:
    % {"motus","unisaws",...}
    % TODO : update description
    para.refInput.type = 'unisaws';

    % path to flight data, can be a vector of paths, must match size of
    % refInputpath
    para.flightInput.path = {...
        char(fullfile("C:","Users","Kilian","Documents","EPFL","PDM","SW","EstArthurGarreau","1_DATA","Phantom","2020-07-18_FLY122_profile.csv")) ...
    %     char(fullfile("C:","Users","Kilian","Documents","EPFL","PDM","Data","topophantom1","20210322","FLY117_10HZ.csv")) ...
    %     ,char(fullfile("C:","Users","Kilian","Documents","EPFL","PDM","Data","topophantom1","20210322","FLY117_10HZ.csv")) ...
        };

    % type of reference (describes the file formatting), available types are:
    % {'datconv3', 'datconv4'...}
    % TODO : update description
    para.flightInput.type = 'datconv3';

    % path to output folder
    para.output.path = fullfile('.','outData','prepro');

    % type of output (describes the file formatting), available types are:
    % {'default',...}
    % TODO : update description
    para.output.type = 'default';
    
    % field present in the output data
    para.output.field = {...
        'lati', ... % [deg]
        'long', ... % [deg]
        'alti', ... % [m] above see level
        'vx', ... % [m/s]
        'vy', ... % [m/s]
        'vz', ... % [m/s]
        'ax', ... % [m/s^2]
        'ay', ... % [m/s^2]
        'az', ... % [m/s^2]
        'roll', ... % [rad]
        'pitch', ... % [rad]
        'yaw', ... % [rad]
        'q1', ... % []
        'q2', ... % []
        'q3', ... % []
        'q4', ... % []
        'gyroX', ... % [rad/s]
        'gyroY', ... % [rad/s]
        'gyroZ', ... % [rad/s]
        'motRpm_RF', ... % [rpm]
        'motRpm_LF', ... % [rpm]
        'motRpm_LB', ... % [rpm]
        'motRpm_RB', ... % [rpm]
        'windHDir', ... % [deg]
        'windHMag', ... % [m/s]
        'windVert' ... % [m/s]
        };

    % datconv4 date and time field name
    para.datconv4.UTCyear = 'gps_utc_data_gps_year_D';
    para.datconv4.UTCmonth = 'gps_utc_data_gps_month_D';
    para.datconv4.UTCday = 'gps_utc_data_gps_day_D';
    para.datconv4.UTChour = 'gps_utc_data_gps_hour_D';
    para.datconv4.UTCminute = 'gps_utc_data_gps_minute_D';
    para.datconv4.UTCsec = 'gps_utc_data_gps_sec_D';
    para.datconv4.timeStamp = 'Clock_offsetTime';

    % datconv4 name of desired field, this is used to create a map from the
    % header of the file to the variable names as defined in
    % para.outout.field. Hence, this cell array must have the same size and
    % shape and must be ordered as in the para.output.field parameter. If a
    % field is not available an empty char array ('') should be used to
    % maintain size and order of the list.
    para.datconv4.varOfInterest = {...
        'IMU_ATTI_0_lati0_D', ...
        'IMU_ATTI_0_long0_D', ...
        'IMU_ATTI_0_alti0_D', ...
        '', ... % vx
        '', ...% vy
        '', ...% vz
        'IMU_ATTI_0_ax0_D', ...
        'IMU_ATTI_0_ay0_D', ...
        'IMU_ATTI_0_az0_D', ...
        '', ... % roll
        '', ... % pitch
        '', ... % yaw
        'IMU_ATTI_0_qw0_D', ...
        'IMU_ATTI_0_qx0_D', ...
        'IMU_ATTI_0_qy0_D', ...
        'IMU_ATTI_0_qz0_D', ...
        'IMU_ATTI_0_wx0_D', ...
        'IMU_ATTI_0_wy0_D', ...
        'IMU_ATTI_0_wz0_D', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '' ...
        };

    % datconv4 unit conversion, list of factor to be applied to a given field 
    % to convert it to desired unit. This cell array must have the same size and
    % shape and must be ordered as in the para.output.field parameter.
    % TODO : check unit conversion 
    para.datconv4.unitConv = [ ...
        57.2958, ...
        57.2958, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1 ...
        ];

    % datconv3 date and time field name
    para.datconv3.UTCdatetimeString = 'GPS_dateTimeStamp';
    para.datconv3.timeStamp = 'offsetTime';

    % datconv3 name of desired field, this is used to create a map from the
    % header of the file to the variable names as defined in
    % para.outout.field. Hence, this cell array must have the same size and
    % shape and must be ordered as in the para.putout.field parameter. If a
    % field is not available an empty char array ('') should be used to
    % maintain size and order of the list.
    para.datconv3.varOfInterest = {...
        'IMU_ATTI_0__Latitude', ...
        'IMU_ATTI_0__Longitude', ...
        '', ...
        '', ...
        '', ...
        '', ...
        'IMU_ATTI_0__accel_X', ...
        'IMU_ATTI_0__accel_Y', ...
        'IMU_ATTI_0__accel_Z', ...
        'IMU_ATTI_0__roll', ...
        'IMU_ATTI_0__pitch', ...
        'IMU_ATTI_0__yaw', ...
        '', ... % q1
        '', ... % q2
        '', ... % q3
        '', ... % q4
        'IMU_ATTI_0__gyro_X', ...
        'IMU_ATTI_0__gyro_Y', ...
        'IMU_ATTI_0__gyro_Z', ...
        'Motor_Speed_RFront', ...
        'Motor_Speed_LFront', ...
        'Motor_Speed_LBack', ...
        'Motor_Speed_RBack', ...
        '', ...
        '', ...
        '' ...
        };

    % datconv3 unit conversion, list of factor to be applied to a given field 
    % to convert it to desired unit. This cell array must have the same size and
    % shape and must be ordered as in the para.output.field parameter.
    % TODO : check unit conversion 
    para.datconv3.unitConv = [ ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            0.0175, ...
            0.0175, ...
            0.0175, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1, ...
            1 ...
            ];        
    

    % MoTUS data header 
    % para.motus.header = {'ID','HorizDir','HorizMag','VertWind','Unit','SoundSpeed','Temp','Date','Port'};

    % MoTUS variable of interest (must be a subset of motus.header)
    % para.motus.varOfInterest = {'HorizDir','HorizMag','VertWind','Date'};

    % MoTUS sample rate [Hz]
    % para.motus.sampleRate = 20;

    % UNISAWS data header 
    para.unisaws.header = {'Timestamp','RecordNbr','ID','AirTemp1','AirTemp2','AirTemp3','AirHumidity1','AirTemp4','AirHumidity2','AtmPressure','WindSpeed2m','WindDir2m','WindSpeed10m','WindDir10'};

    % UNISAWS timestamp field name
    para.unisaws.timeStamp = 'Timestamp';

    % UNISAWS variable of interest (must be a subset of motus.header)
    para.unisaws.varOfInterest = { ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        '', ...
        'WindDir10', ...
        'WindSpeed10m', ...
        '' ...
        };

    % unisaws unit conversion, list of factor to be applied to a given field 
    % to convert it to desired unit. This cell array must have the same size and
    % shape and must be ordered as in the para.output.field parameter.
    % TODO : check unit conversion 
    para.unisaws.unitConv = [ ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1, ...
        1 ...
        ];        
    
end